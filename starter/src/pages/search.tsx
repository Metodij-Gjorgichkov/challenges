import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import BlogItem from "../components/BlogItem";
import PageTitle from "../components/PageTitle";
import ProductItem from "../components/ProductItem";
import { FeaturedBlogsType, FeaturedProductsType } from "../types/type";

interface Props {
  productsData: FeaturedProductsType[];
  blogsData: FeaturedBlogsType[];
}

const Search: NextPage<Props> = ({ productsData, blogsData }) => {
  return (
    <>
      <Head>
        <title>Store - Search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageTitle title="Store - Search" />

      <div className="bg0 m-t-23 p-b-140 mt-5">
        <div className="container">
          {/* blogs  */}
          <>
            <h2 className="mb-5">Blogs</h2>
            <div className="row isotope-grid">
              {/* blog skeleton - search result */}
              {blogsData.length === 0 ? (
                <p>There are no blogs</p>
              ) : (
                blogsData.map((blog) => {
                  return (
                    <div className="col-4">
                      <BlogItem {...blog} />
                    </div>
                  );
                })
              )}
              {/* !! */}
            </div>
          </>

          {/* products */}
          <>
            <h2 className="mb-5">Products</h2>
            <div className="row isotope-grid">
              {/* product skeleton */}
              {productsData.length === 0 ? (
                <p>There are no products</p>
              ) : (
                productsData.map((product) => {
                  return <ProductItem {...product} />;
                })
              )}
              {/* !! */}
            </div>
          </>
        </div>
      </div>
    </>
  );
};

export default Search;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  let productsData: FeaturedProductsType[];
  let blogsData: FeaturedBlogsType[];
  let resProduct: Response;
  let resBlog: Response;

  if (query.searchTerm) {
    resProduct = await fetch(
      `http://localhost:5001/products?q=${query.searchTerm}`
    );
    resBlog = await fetch(`http://localhost:5001/blogs?q=${query.searchTerm}`);
  } else {
    return {
      props: {
        productsData: [],
        blogsData: [],
      },
    };
  }

  productsData = await resProduct.json();
  blogsData = await await resBlog.json();

  return {
    props: {
      productsData,
      blogsData,
    },
  };
};
