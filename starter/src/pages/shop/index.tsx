import type { GetServerSideProps, NextPage } from "next";
import { route } from "next/dist/server/router";
import Head from "next/head";
import { useRouter } from "next/router";
import { ChangeEvent, useRef, useState } from "react";
import { FeaturedProductsType } from "../../types/type";
import Link from "next/link";

interface Props {
  filteredData: FeaturedProductsType[];
}

const Shop: NextPage<Props> = ({ filteredData }) => {
  const [searchValue, setSearchValue] = useState<string>("");
  const router = useRouter();

  return (
    <>
      <Head>
        <title>Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="bg0 m-t-23 p-b-140">
        <div className="container">
          <div className="flex-w flex-sb-m p-b-52">
            <div className="flex-w flex-l-m filter-tope-group m-tb-10">
              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  Object.keys(router.query).length === 0 ? "how-active1" : ""
                } `}
                data-filter="*"
                onClick={() => {
                  router.push({
                    pathname: "/shop",
                    query: {},
                  });
                }}
              >
                All Products
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  router.query.gender === "women" && "how-active1"
                }`}
                data-filter=".women"
                onClick={() => {
                  router.push({
                    pathname: "shop",
                    query: {
                      gender: "women",
                    },
                  });
                }}
              >
                Women
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  router.query.gender === "man" && "how-active1"
                }`}
                data-filter=".men"
                onClick={() => {
                  router.push({
                    pathname: "/shop",
                    query: {
                      ...router.query,
                      gender: "man",
                    },
                  });
                }}
              >
                Men
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  router.query.g === "belt" && "how-active1"
                }`}
                data-filter=".bag"
                onClick={() => {
                  router.push({
                    pathname: "shop",
                    query: {
                      ...router.query,
                      q: "belt",
                    },
                  });
                }}
              >
                Belt
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  router.query.g === "shoes" && "how-active1"
                }`}
                data-filter=".shoes"
                onClick={() => {
                  router.push({
                    pathname: "/shop",
                    query: {
                      ...router.query,
                      q: "shoes",
                    },
                  });
                }}
              >
                Shoes
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  router.query.g === "watches" && "how-active1"
                }`}
                data-filter=".watches"
                onClick={() => {
                  router.push({
                    pathname: "/shop",
                    query: {
                      ...router.query,
                      q: "watch",
                    },
                  });
                }}
              >
                Watches
              </button>
            </div>

            <div className="flex-w flex-c-m m-tb-10">
              <div className="flex-c-m stext-106 cl6 size-105 bor4 pointer hov-btn3 trans-04 m-tb-4 js-show-search show-search">
                <i className="icon-search cl2 m-r-6 fs-15 trans-04 zmdi zmdi-search"></i>
                Search
              </div>
            </div>

            {/* search */}
            <div className="panel-search w-full p-t-10 p-b-15">
              <div className="bor8 dis-flex p-l-15">
                <button
                  className="size-113 flex-c-m fs-16 cl2 hov-cl1 trans-04"
                  onClick={() => {
                    router.push({
                      pathname: "/shop",
                      query: {
                        q: searchValue,
                      },
                    });
                    setSearchValue("");
                  }}
                >
                  <i className="zmdi zmdi-search"></i>
                </button>

                <input
                  className="mtext-107 cl2 size-114 plh2 p-r-15"
                  type="text"
                  name="search-product"
                  placeholder="Search"
                  onChange={(event: ChangeEvent<HTMLInputElement>) =>
                    setSearchValue(event.target.value)
                  }
                  value={searchValue}
                />
              </div>
            </div>
          </div>

          <div className="row isotope-grid">
            {filteredData.length === 0 ? (
              <div>There are no products</div>
            ) : (
              filteredData.map((product) => {
                return (
                  <Link href={`/shop/${product.id}`}>
                    <div className="col-sm-6 col-md-4 col-lg-3 p-b-35 isotope-item women">
                      <div className="block2">
                        <div className="block2-pic hov-img0">
                          <img src={product.img} alt="IMG-PRODUCT" />

                          <a
                            href="#"
                            className="block2-btn flex-c-m stext-103 cl2 size-102 bg0 bor2 hov-btn1 p-lr-15 trans-04 js-show-modal1"
                          >
                            View Details
                          </a>
                        </div>

                        <div className="block2-txt flex-w flex-t p-t-14">
                          <div className="block2-txt-child1 flex-col-l ">
                            <a
                              href="product-detail.html"
                              className="stext-104 cl4 hov-cl1 trans-04 js-name-b2 p-b-6"
                            >
                              {product.title}
                            </a>

                            <span className="stext-105 cl3">
                              {product.price}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </Link>
                );
              })
            )}
          </div>

          <div className="flex-l-m flex-w w-full p-t-10 m-lr--7">
            <a
              href="#"
              className="flex-c-m how-pagination1 trans-04 m-all-7 active-pagination1"
            >
              1
            </a>

            <a href="#" className="flex-c-m how-pagination1 trans-04 m-all-7">
              2
            </a>

            <a href="#" className="flex-c-m how-pagination1 trans-04 m-all-7">
              3
            </a>
          </div>
        </div>
      </div>
    </>
  );
};

export default Shop;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  let data: FeaturedProductsType[];
  let res: Response;

  if (query.gender && query.q) {
    res = await fetch(
      `http://localhost:5001/products?gender_like=${query.gender}&q=${query.q}`
    );
  } else if (query.gender) {
    res = await fetch(
      `http://localhost:5001/products?gender_like=${query.gender}`
    );
  } else if (query.q) {
    res = await fetch(`http://localhost:5001/products?q=${query.q}`);
  } else {
    res = await fetch("http://localhost:5001/products");
  }
  data = await res.json();

  return {
    props: {
      filteredData: data,
    },
  };
};
