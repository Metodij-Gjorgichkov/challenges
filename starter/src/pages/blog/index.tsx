import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import React, { useState } from "react";
import BlogItem from "../../components/BlogItem";
import PageTitle from "../../components/PageTitle";
import { FeaturedBlogsType } from "../../types/type";
import { useRouter } from "next/router";
import Link from "next/link";

interface Props {
  blogsData: FeaturedBlogsType[];
}

const Blog: NextPage<Props> = ({ blogsData }) => {
  const [searchValue, setSearchValue] = useState<string>("");
  const router = useRouter();

  const handleOnSearchSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    router.push({
      pathname: "/blog",
      query: {
        ...router.query,
        q: searchValue,
      },
    });
    setSearchValue("");
  };

  return (
    <>
      <Head>
        <title>Store - Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageTitle title="Store - Blog" />

      <section className="bg0 p-t-62 p-b-60">
        <div className="container">
          <div className="row">
            <div className="col-md-8 col-lg-9 p-b-80">
              <div className="p-r-45 p-r-0-lg">
                {blogsData.length === 0 ? (
                  <p>There are no results with your search.</p>
                ) : (
                  blogsData.map((blog) => (
                    <Link href={`/blog/${blog.id}`} key={blog.id}>
                      <BlogItem {...blog} />
                    </Link>
                  ))
                )}
              </div>
            </div>

            <div className="col-md-4 col-lg-3 p-b-80">
              <div className="side-menu">
                <form
                  className="bor17 of-hidden pos-relative"
                  onSubmit={handleOnSearchSubmit}
                >
                  <input
                    value={searchValue}
                    className="stext-103 cl2 plh4 size-116 p-l-28 p-r-55"
                    type="text"
                    name="search"
                    placeholder="Search"
                    onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
                      setSearchValue(event.target.value)
                    }
                  />

                  <button className="flex-c-m size-122 ab-t-r fs-18 cl4 hov-cl1 trans-04">
                    <i className="zmdi zmdi-search"></i>
                  </button>
                </form>

                <div className="p-t-55">
                  <h4 className="mtext-112 cl2 p-b-33">Categories</h4>

                  <ul>
                    <li className="bor18">
                      <button
                        className="dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4"
                        onClick={() => {
                          router.push({
                            pathname: "/blog",
                            query: {
                              category: "fashion",
                            },
                          });
                        }}
                      >
                        Fashion
                      </button>
                    </li>

                    <li className="bor18">
                      <button
                        className="dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4"
                        onClick={() => {
                          router.push({
                            pathname: "/blog",
                            query: {
                              category: "beauty",
                            },
                          });
                        }}
                      >
                        Beauty
                      </button>
                    </li>

                    <li className="bor18">
                      <button
                        className="dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4"
                        onClick={() => {
                          router.push({
                            pathname: "/blog",
                            query: {
                              category: "streetstyle",
                            },
                          });
                        }}
                      >
                        Street Style
                      </button>
                    </li>

                    <li className="bor18">
                      <button
                        className="dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4"
                        onClick={() => {
                          router.push({
                            pathname: "/blog",
                            query: {
                              category: "lifestyle",
                            },
                          });
                        }}
                      >
                        Life Style
                      </button>
                    </li>

                    <li className="bor18">
                      <button
                        className="dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4"
                        onClick={() => {
                          router.push({
                            pathname: "/blog",
                            query: {
                              category: "diy",
                            },
                          });
                        }}
                      >
                        DIY & Crafts
                      </button>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </>
  );
};

export default Blog;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  let data: FeaturedBlogsType[];
  let res: Response;

  if (query.category && query.q) {
    res = await fetch(
      `http://localhost:5001/blogs?category_like=${query.category}&q=${query.q}`
    );
  } else if (query.category) {
    res = await fetch(
      `http://localhost:5001/blogs?category_like=${query.category}`
    );
  } else if (query.q) {
    res = await fetch(`http://localhost:5001/blogs?q=${query.q}`);
  } else {
    res = await fetch(`http://localhost:5001/blogs`);
  }
  data = await res.json();

  return {
    props: {
      blogsData: data,
    },
  };
};
